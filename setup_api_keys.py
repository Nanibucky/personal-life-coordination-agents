#!/usr/bin/env python3
"""
Personal Life Coordination Agents - API Key Setup Script
Interactive script to help configure all API keys for all agents
"""

import os
import json
import sys
from pathlib import Path
from typing import Dict, Any, List

def print_banner():
    """Print setup banner"""
    print("=" * 80)
    print("ü§ñ Personal Life Coordination Agents - API Configuration Setup")
    print("=" * 80)
    print()
    print("This script will help you configure API keys for all your agents:")
    print("üõçÔ∏è  Bucky - Shopping & Inventory Agent")
    print("üèÉ Luna - Health & Fitness Agent") 
    print("üçΩÔ∏è  Milo - Nutrition & Meal Planning Agent")
    print("üìÖ Nani - Scheduler & Calendar Agent")
    print()

def get_user_input(prompt: str, current_value: str = None, required: bool = True, secret: bool = True) -> str:
    """Get user input with validation"""
    display_current = ""
    if current_value and current_value not in ["", "YOUR_API_KEY_HERE", "your_api_key_here"]:
        if secret and len(current_value) > 20:
            display_current = f" (current: {current_value[:10]}...{current_value[-4:]})"
        else:
            display_current = f" (current: {current_value})"
    
    full_prompt = f"{prompt}{display_current}"
    if not required:
        full_prompt += " [OPTIONAL]"
    full_prompt += ": "
    
    while True:
        value = input(full_prompt).strip()
        if value:
            return value
        elif current_value and current_value not in ["", "YOUR_API_KEY_HERE", "your_api_key_here"]:
            return current_value  # Keep existing value
        elif not required:
            return ""
        else:
            print("‚ùå This field is required. Please enter a value.")

def update_env_file(updates: Dict[str, str]) -> None:
    """Update the .env file with new values"""
    env_path = Path(__file__).parent / ".env"
    
    # Read current .env content
    env_content = {}
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_content[key] = value
    
    # Update with new values
    env_content.update(updates)
    
    # Write comprehensive .env file
    with open(env_path, 'w') as f:
        f.write("# Personal Life Coordination Agents - API Configuration\n")
        f.write("# Generated by setup_api_keys.py\n\n")
        
        # Core AI APIs
        f.write("# Core AI API Keys\n")
        f.write(f"OPENAI_API_KEY={env_content.get('OPENAI_API_KEY', 'YOUR_OPENAI_API_KEY_HERE')}\n")
        f.write(f"ANTHROPIC_API_KEY={env_content.get('ANTHROPIC_API_KEY', 'YOUR_ANTHROPIC_API_KEY_HERE')}\n\n")
        
        # System Configuration
        f.write("# System Configuration\n")
        f.write(f"LOG_LEVEL={env_content.get('LOG_LEVEL', 'INFO')}\n")
        f.write(f"API_GATEWAY_HOST={env_content.get('API_GATEWAY_HOST', '0.0.0.0')}\n")
        f.write(f"API_GATEWAY_PORT={env_content.get('API_GATEWAY_PORT', '8000')}\n")
        f.write(f"REACT_APP_API_URL={env_content.get('REACT_APP_API_URL', 'http://localhost:8000')}\n\n")
        
        # Nani (Scheduler) APIs
        f.write("# Nani (Scheduler) API Keys\n")
        f.write(f"GOOGLE_CLIENT_ID={env_content.get('GOOGLE_CLIENT_ID', '162356676608-79dcp2841e6tndjjbn1373bq1tv0p3ud.apps.googleusercontent.com')}\n")
        f.write(f"GOOGLE_CLIENT_SECRET={env_content.get('GOOGLE_CLIENT_SECRET', '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')}\n")
        f.write(f"GOOGLE_REDIRECT_URI={env_content.get('GOOGLE_REDIRECT_URI', 'http://localhost:8000/auth/google/callback')}\n")
        f.write(f"OPENWEATHER_API_KEY={env_content.get('OPENWEATHER_API_KEY', 'YOUR_OPENWEATHER_API_KEY_HERE')}\n")
        f.write(f"OUTLOOK_CLIENT_ID={env_content.get('OUTLOOK_CLIENT_ID', 'YOUR_OUTLOOK_CLIENT_ID_HERE')}\n")
        f.write(f"OUTLOOK_CLIENT_SECRET={env_content.get('OUTLOOK_CLIENT_SECRET', 'YOUR_OUTLOOK_CLIENT_SECRET_HERE')}\n\n")
        
        # Luna (Health) APIs
        f.write("# Luna (Health & Fitness) API Keys\n")
        f.write(f"FITBIT_CLIENT_ID={env_content.get('FITBIT_CLIENT_ID', '22ABC123')}\n")
        f.write(f"FITBIT_CLIENT_SECRET={env_content.get('FITBIT_CLIENT_SECRET', 'secret123')}\n")
        f.write(f"GARMIN_API_KEY={env_content.get('GARMIN_API_KEY', 'garmin123')}\n")
        f.write(f"STRAVA_CLIENT_ID={env_content.get('STRAVA_CLIENT_ID', 'strava456')}\n")
        f.write(f"STRAVA_CLIENT_SECRET={env_content.get('STRAVA_CLIENT_SECRET', 'strava_secret')}\n\n")
        
        # Milo (Nutrition) APIs
        f.write("# Milo (Nutrition) API Keys\n")
        f.write(f"USDA_API_KEY={env_content.get('USDA_API_KEY', 'DEMO_KEY')}\n")
        f.write(f"NUTRITIONIX_APP_ID={env_content.get('NUTRITIONIX_APP_ID', '12345abc')}\n")
        f.write(f"NUTRITIONIX_API_KEY={env_content.get('NUTRITIONIX_API_KEY', 'nutrition_key_123')}\n")
        f.write(f"SPOONACULAR_API_KEY={env_content.get('SPOONACULAR_API_KEY', 'YOUR_SPOONACULAR_API_KEY_HERE')}\n")
        f.write(f"RECIPE_API_KEY={env_content.get('RECIPE_API_KEY', 'YOUR_RECIPE_API_KEY_HERE')}\n\n")
        
        # Bucky (Shopping) APIs
        f.write("# Bucky (Shopping) API Keys\n")
        f.write(f"GROUPON_API_KEY={env_content.get('GROUPON_API_KEY', 'YOUR_GROUPON_API_KEY_HERE')}\n")
        f.write(f"HONEY_ACCOUNT={env_content.get('HONEY_ACCOUNT', 'YOUR_HONEY_ACCOUNT_HERE')}\n")
        f.write(f"RAKUTEN_API_KEY={env_content.get('RAKUTEN_API_KEY', 'YOUR_RAKUTEN_API_KEY_HERE')}\n")
        f.write(f"IBOTTA_API_KEY={env_content.get('IBOTTA_API_KEY', 'YOUR_IBOTTA_API_KEY_HERE')}\n")
        f.write(f"KROGER_API_KEY={env_content.get('KROGER_API_KEY', 'YOUR_KROGER_API_KEY_HERE')}\n")
        f.write(f"WALMART_API_KEY={env_content.get('WALMART_API_KEY', 'YOUR_WALMART_API_KEY_HERE')}\n")
        f.write(f"TARGET_API_KEY={env_content.get('TARGET_API_KEY', 'YOUR_TARGET_API_KEY_HERE')}\n")
        f.write(f"COSTCO_API_KEY={env_content.get('COSTCO_API_KEY', 'YOUR_COSTCO_API_KEY_HERE')}\n")
        f.write(f"WHOLE_FOODS_API_KEY={env_content.get('WHOLE_FOODS_API_KEY', 'YOUR_WHOLE_FOODS_API_KEY_HERE')}\n")
        f.write(f"BARCODE_SCANNER_API_KEY={env_content.get('BARCODE_SCANNER_API_KEY', 'YOUR_BARCODE_SCANNER_API_KEY_HERE')}\n\n")
        
        # Database and Infrastructure
        f.write("# Database and Infrastructure\n")
        f.write(f"DATABASE_URL={env_content.get('DATABASE_URL', 'sqlite:///data/main.db')}\n")
        f.write(f"REDIS_URL={env_content.get('REDIS_URL', 'redis://localhost:6379')}\n")

def get_api_configuration_info() -> Dict[str, Dict[str, Any]]:
    """Return comprehensive API configuration information"""
    return {
        "core_ai": {
            "title": "ü§ñ Core AI APIs (Required for all agents)",
            "apis": {
                "OPENAI_API_KEY": {
                    "name": "OpenAI API Key",
                    "description": "Required for AI-powered features across all agents",
                    "url": "https://platform.openai.com/api-keys",
                    "required": True
                },
                "ANTHROPIC_API_KEY": {
                    "name": "Anthropic API Key",
                    "description": "Alternative AI provider (optional but recommended)",
                    "url": "https://console.anthropic.com/",
                    "required": False
                }
            }
        },
        "nani_scheduler": {
            "title": "üìÖ Nani - Scheduler & Calendar Agent",
            "apis": {
                "GOOGLE_CLIENT_ID": {
                    "name": "Google Calendar Client ID",
                    "description": "For Google Calendar integration",
                    "url": "https://console.developers.google.com/",
                    "required": True
                },
                "GOOGLE_CLIENT_SECRET": {
                    "name": "Google Calendar Client Secret", 
                    "description": "For Google Calendar integration",
                    "url": "https://console.developers.google.com/",
                    "required": True
                },
                "OPENWEATHER_API_KEY": {
                    "name": "OpenWeather API Key",
                    "description": "For weather-aware scheduling",
                    "url": "https://openweathermap.org/api",
                    "required": False
                },
                "OUTLOOK_CLIENT_ID": {
                    "name": "Outlook Calendar Client ID",
                    "description": "For Microsoft Outlook integration",
                    "url": "https://portal.azure.com/",
                    "required": False
                }
            }
        },
        "luna_health": {
            "title": "üèÉ Luna - Health & Fitness Agent",
            "apis": {
                "FITBIT_CLIENT_ID": {
                    "name": "Fitbit Client ID",
                    "description": "For Fitbit device integration",
                    "url": "https://dev.fitbit.com/apps",
                    "required": False
                },
                "GARMIN_API_KEY": {
                    "name": "Garmin Connect API Key",
                    "description": "For Garmin device integration",
                    "url": "https://developer.garmin.com/",
                    "required": False
                },
                "STRAVA_CLIENT_ID": {
                    "name": "Strava Client ID",
                    "description": "For Strava activity integration",
                    "url": "https://developers.strava.com/",
                    "required": False
                }
            }
        },
        "milo_nutrition": {
            "title": "üçΩÔ∏è Milo - Nutrition & Meal Planning Agent",
            "apis": {
                "USDA_API_KEY": {
                    "name": "USDA Food Database API Key",
                    "description": "For nutritional information",
                    "url": "https://fdc.nal.usda.gov/api-guide.html",
                    "required": False
                },
                "NUTRITIONIX_API_KEY": {
                    "name": "Nutritionix API Key",
                    "description": "For detailed nutrition analysis",
                    "url": "https://developer.nutritionix.com/",
                    "required": False
                },
                "SPOONACULAR_API_KEY": {
                    "name": "Spoonacular API Key",
                    "description": "For recipe and meal planning",
                    "url": "https://spoonacular.com/food-api",
                    "required": False
                }
            }
        },
        "bucky_shopping": {
            "title": "üõçÔ∏è Bucky - Shopping & Inventory Agent",
            "apis": {
                "WALMART_API_KEY": {
                    "name": "Walmart API Key",
                    "description": "For Walmart product prices",
                    "url": "https://developer.walmart.com/",
                    "required": False
                },
                "TARGET_API_KEY": {
                    "name": "Target API Key",
                    "description": "For Target product information",
                    "url": "https://developer.target.com/",
                    "required": False
                },
                "KROGER_API_KEY": {
                    "name": "Kroger API Key",
                    "description": "For Kroger product prices",
                    "url": "https://developer.kroger.com/",
                    "required": False
                },
                "GROUPON_API_KEY": {
                    "name": "Groupon API Key",
                    "description": "For deal and coupon finding",
                    "url": "https://partner-api.groupon.com/",
                    "required": False
                }
            }
        }
    }

def configure_agent_apis(agent_config: Dict[str, Any]) -> Dict[str, str]:
    """Configure APIs for a specific agent"""
    print(f"\n{agent_config['title']}")
    print("-" * len(agent_config['title']))
    
    updates = {}
    current_env = dict(os.environ)
    
    for api_key, api_info in agent_config['apis'].items():
        print(f"\nüìã {api_info['name']}")
        print(f"   Description: {api_info['description']}")
        print(f"   Get your key: {api_info['url']}")
        
        current_value = current_env.get(api_key, "")
        new_value = get_user_input(
            f"Enter your {api_info['name']}", 
            current_value, 
            api_info['required'],
            secret=True
        )
        
        if new_value and new_value != current_value:
            updates[api_key] = new_value
    
    return updates

def validate_configuration() -> List[str]:
    """Validate the current configuration"""
    issues = []
    
    # Check for critical missing keys
    if not os.getenv('OPENAI_API_KEY') or os.getenv('OPENAI_API_KEY') == 'YOUR_OPENAI_API_KEY_HERE':
        issues.append("‚ùå OpenAI API Key is required for AI functionality")
    
    # Check Google Calendar configuration for Nani
    if not os.getenv('GOOGLE_CLIENT_ID') or 'YOUR_' in os.getenv('GOOGLE_CLIENT_ID', ''):
        issues.append("‚ö†Ô∏è  Google Calendar not configured - Nani won't be able to manage calendars")
    
    return issues

def main():
    """Main setup function"""
    print_banner()
    
    # Get current configuration status
    print("üîç Checking current configuration...\n")
    issues = validate_configuration()
    
    if issues:
        print("Configuration issues found:")
        for issue in issues:
            print(f"  {issue}")
        print()
    else:
        print("‚úÖ Current configuration looks good!\n")
    
    print("Would you like to:")
    print("1. Configure all APIs interactively")
    print("2. Quick setup (just essential APIs)")
    print("3. View configuration status")
    print("4. Exit")
    
    choice = input("\nEnter your choice (1-4): ").strip()
    
    if choice == "1":
        # Full interactive setup
        api_config = get_api_configuration_info()
        all_updates = {}
        
        for agent_key, agent_config in api_config.items():
            updates = configure_agent_apis(agent_config)
            all_updates.update(updates)
        
        if all_updates:
            print("\nüíæ Updating configuration...")
            update_env_file(all_updates)
            print("‚úÖ Configuration updated successfully!")
        else:
            print("\n‚ÑπÔ∏è  No changes made to configuration.")
    
    elif choice == "2":
        # Quick setup - just essentials
        print("\nüöÄ Quick Setup - Essential APIs Only")
        print("=" * 40)
        
        updates = {}
        current_env = dict(os.environ)
        
        # OpenAI API Key (required)
        print("\n1. OpenAI API Key (REQUIRED)")
        print("   Get your key: https://platform.openai.com/api-keys")
        openai_key = get_user_input("Enter your OpenAI API key", current_env.get('OPENAI_API_KEY', ''))
        if openai_key:
            updates['OPENAI_API_KEY'] = openai_key
        
        # Google Calendar for Nani
        print("\n2. Google Calendar for Nani (HIGHLY RECOMMENDED)")
        print("   Set up at: https://console.developers.google.com/")
        setup_google = input("Set up Google Calendar? (y/N): ").strip().lower()
        
        if setup_google == 'y':
            google_id = get_user_input("Enter Google Client ID", current_env.get('GOOGLE_CLIENT_ID', ''))
            google_secret = get_user_input("Enter Google Client Secret", current_env.get('GOOGLE_CLIENT_SECRET', ''))
            if google_id:
                updates['GOOGLE_CLIENT_ID'] = google_id
            if google_secret:
                updates['GOOGLE_CLIENT_SECRET'] = google_secret
        
        if updates:
            update_env_file(updates)
            print("\n‚úÖ Quick setup complete!")
        else:
            print("\n‚ÑπÔ∏è  No changes made.")
    
    elif choice == "3":
        # Configuration status
        print("\nüìä Configuration Status")
        print("=" * 40)
        
        api_config = get_api_configuration_info()
        for agent_key, agent_config in api_config.items():
            print(f"\n{agent_config['title']}")
            for api_key, api_info in agent_config['apis'].items():
                current_value = os.getenv(api_key, "")
                if current_value and "YOUR_" not in current_value and current_value != "":
                    status = "‚úÖ Configured"
                elif api_info['required']:
                    status = "‚ùå Missing (Required)"
                else:
                    status = "‚ö†Ô∏è  Not configured (Optional)"
                
                print(f"  {api_info['name']}: {status}")
    
    else:
        print("üëã Goodbye!")
        return
    
    # Final instructions
    print("\nüéâ Setup Instructions:")
    print("1. Make sure all required API keys are configured")
    print("2. Start individual agents:")
    print("   ‚Ä¢ Nani (Scheduler): python agents/nani_scheduler/mcp_server.py")
    print("   ‚Ä¢ Luna (Health): python agents/luna_health/mcp_server.py")
    print("   ‚Ä¢ Milo (Nutrition): python agents/milo_nutrition/mcp_server.py")
    print("   ‚Ä¢ Bucky (Shopping): python agents/bucky_shopping/mcp_server.py")
    print("3. Or start all agents: python scripts/start_all.py")
    print("4. Access the web interface: http://localhost:8000")
    
    print("\nüìñ For detailed setup instructions, see the README.md file.")

if __name__ == "__main__":
    main()